#!/usr/bin/bash

#parse parameters
usage()
{
	echo "netq"
	echo "  -d: interval"
	echo "  -i: device"
	echo "  -T: [iplink|ethtool]"
	echo "  -t: [bytes|packets|erros|dropped|overrun|mcast|rx_error|tx_error|rx_missed_error|etc]"
	echo "      type means all output of iplink or ethtool"
	echo "  -D: [RX|TX]"
	exit 0
}

#Parameter 
typeset -i check_interval
check_direction="RX"
check_tool="iplink"
check_type="bytes"
check_device="eth0"

while getopts d:D:T:t:i:h OPTION
do
        case "$OPTION" in
        d) check_interval=$OPTARG;;
	D) check_direction="$OPTARG";;
        i) check_device="$OPTARG";;
        t) check_type="$OPTARG";;
	T) check_tool="$OPTARG";;
        h) usage;;
        :) {
           	echo "$OPTARG need args";
            	usage;
        };;
        \?) {
            	echo "$OPTARG is invluad option";
           	 usage;
        };;
        esac
done

typeset -i cnt_start
typeset -i cnt_end
typeset -i cnt_diff
typeset -i check_type_idx

###########################################
# ip -s link counter monitor
###########################################
#check_device check_direction, check_type
query_iplink_counter()
{
	check_data_number=$(ip -s link show $check_device | grep -A1 "$check_direction: bytes" | grep -v $check_direction)  
        #bytes  packets  errors  dropped
        if [[ "$check_type" == "bytes" ]]; then
		packet_counter=$(echo $check_data_number | awk '{ print $1 }')
        elif [[ "$check_type" == "packets" ]]; then
		packet_counter=$(echo $check_data_number | awk '{ print $2 }')
        elif [[ "$check_type" == "errors" ]]; then
		packet_counter=$(echo $check_data_number | awk '{ print $3 }')
        elif [[ "$check_type" == "dropped" ]]; then
		packet_counter=$(echo $check_data_number | awk '{ print $4 }')
        else
	        echo "Invalid Packet Type"
       		usage
        fi
	echo $packet_counter
}
print_iplink_title()
{
	echo "date	device	direction	type	start	end	diff	diff/kb	diff/mb	total_diff/bytes"
}
print_iplink_counter()
{
	echo "$date_str	$check_device	$check_direction	$check_type	$cnt_start	$cnt_end	$cnt_diff	$cnt_diff_k	$cnt_diff_m	$total_diff"
}
###############################################################


##############################################
# ethtool -S | grep -i error
#############################################
query_ethtool_counter()
{
	check_data_number=$(ethtool -S $check_device | grep rx_missed_error | awk '{ print $2 }')
	echo $check_data_number
}
print_ethtool_title()
{
	echo "date      device  start   end     diff/bytes      diff/kb diff/mb total_diff/bytes"
}
print_ethtool_counter()
{
	echo "$date_str $check_device   $cnt_start      $cnt_end        $cnt_diff       $cnt_diff_k     $cnt_diff_m     $total_diff"
}

#########################################
# MAIN 
########################################
date_str=$(date +%H:%M:%S)
case $check_tool in
iplink)
	print_iplink_title
	cnt_start=$(query_iplink_counter)
	;;
ethtool)
	print_ethtool_title
	cnt_start=$(query_ethtool_counter)
	;;
*)
	echo "Sorry, $check_tool now not supported"
	;;
esac

typeset -i first_cnt=$cnt_start
typeset -i total_diff=0
while [[ 1 ]]; 
do
	sleep $check_interval	
	case $check_tool in
	iplink)
		cnt_end=$(query_iplink_counter)
		;;
	ethtool)
		cnt_end=$(query_ethtool_counter)
		;;
	*)
		echo "Sorry, $check_tool now not supported"
		;;
	esac
	cnt_diff=$cnt_end-$cnt_start
	total_diff=$cnt_end-$first_cnt
	cnt_diff_k=$(echo "scale=2; $cnt_diff/1024" | bc)
	cnt_diff_m=$(echo "scale=2; $cnt_diff_k/1024" | bc)
	case $check_tool in
	iplink)
		print_iplink_counter
		;;
	ethtool)
		print_ethtool_counter
		;;
	*)
		echo "Sorry, $check_tool now not supported"
		;;
	esac
	date_str=$(date +%H:%M:%S)
	cnt_start=$cnt_end
done
