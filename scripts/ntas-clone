#!/usr/bin/env bash

if [[ $# -eq 1 ]]; then
    NAMESPACE=$1
else
    NAMESPACE="tas"
fi

BASE_PATH="https://scm.cci.nokia.net/"
PROJECT_PROJECTION="{ "path": .path, "git": .ssh_url_to_repo }"

GITLAB_PRIVATE_TOKEN="g1cEpFVMRgH6DxrMJpJy"
FILENAME="/tmp/repos.json"
NEW_FILENAME="/tmp/new-repos.json"

CUR_DIR=$PWD #/home/ryanl/ntas
export http_proxy="http://135.245.48.32:8000"
export https_proxy="http://135.245.48.32:8000"
export no_proxy="127.0.0.1,gitlabe1.ext.net.nokia.com"

clone_dev_repo()
{
  REPO_NAME=$1
  REPO_URL=$2
  if [ ! -d "$CUR_DIR/$REPO_NAME" ]; then
    echo "Clone $REPO_NAME...."
    cd $CUR_DIR
    git clone $REPO_URL $REPO_NAME
  else
    echo "Pulling $REPO_NAME..."
    cd $CUR_DIR/$REPO_NAME
    git pull
  fi
}

#clone some ntas developer repository used by ntas offically: interesting.....
#clone_dev_repo "heapster" "git@gitlabe1.ext.net.nokia.com:mihelcsi/heapster.git"
#clone_dev_repo "chart-repos-handler" "git@gitlabe1.ext.net.nokia.com:huszty/swift-http-frontend.git"
#clone_dev_repo "confd" "git@github.com:kelseyhightower/confd.git"

typeset -A SA_REPOSITORY
SA_REPOSITORY[1]="tas-infra"
SA_REPOSITORY[2]="CIScripts"

cd $CUR_DIR

#First Clone tas superproject
if [ ! -d "$CUR_DIR/$NAMESPACE" ]; then
    echo "Cloning $NAMESPACE superproject"
    git clone -b ntas-19-0 git@gitlabe1.ext.net.nokia.com:$NAMESPACE/$NAMESPACE.git $NAMESPACE
    cd $CUR_DIR/$NAMESPACE
    git submodule update --init --recursive
else
    echo "Pulling $NAMESPACE superproject"
    cd $CUR_DIR/$NAMESPACE
    git pull
fi

#Then Clone Container superproject
[ -e $FILENAME  ] && rm $FILENAME

PAGE_COUNTER=1
    echo -n "Browsing ntas repository"
while true; do
    echo -n " ."
    CURL_OUT=$(curl -s -XGET "${BASE_PATH}api/v4/groups/$NAMESPACE/projects?private_token=$GITLAB_PRIVATE_TOKEN&per_page=10&page=$PAGE_COUNTER")
    if [ "$CURL_OUT" == "[]" ]; then break; fi
    tofile=$(echo $CURL_OUT | jq --raw-output --compact-output ".[] | $PROJECT_PROJECTION" )
    echo $tofile >> $FILENAME
    let PAGE_COUNTER++
done
echo " Done"

sed -e "s/ /\n/g" $FILENAME > $NEW_FILENAME
while read repo; do
    THEPATH=$(echo "$repo" | jq -r ".path")
    GIT=$(echo "$repo" | jq -r ".git")
    if [[ $THEPATH == sp-* ]]; then
        if [ ! -d "$CUR_DIR/$THEPATH" ]; then
            cd $CUR_DIR
            echo "Cloning Container $THEPATH superproject in $PWD ..."
            git clone -b ntas-19-0 $GIT
            cd $CUR_DIR/$THEPATH
            git submodule update --init --recursive
        else
            echo "Pulling $THEPATH"
            (cd "$CUR_DIR/$THEPATH" && git pull) &
        fi
    elif [[ " ${SA_REPOSITORY[*]} " == *" $THEPATH "* ]]; then
        if [ ! -d "$CUR_DIR/$THEPATH" ]; then
            cd $CUR_DIR
            echo "Cloning Container $THEPATH superproject in $PWD ..."
            git clone -b ntas-19-0 $GIT
            cd $CUR_DIR/$THEPATH
            git submodule update --init --recursive
        else
            echo "Pulling $THEPATH"
            (cd "$CUR_DIR/$THEPATH" && git pull) &
        fi
    fi
done < $NEW_FILENAME

rm -rf $FILE_NAME, $NEW_FILENAME
